# l = [4, 6, 9, 1, 3]
# # 1 способ
# l.index(9)
# # 2 способ
# for i, el in enumerate(l):
#     if el == 9:
#         print(i)

#
# d = {'Артем': 'Щит', 'Ваня': 'Меч', 'Алена': 'Броня'}
# for key in d:
#     if d[key] == 'Меч':
#         print(key)



# ---------------------- Строки ---------------------------- #
'''
строки - это набор символов заключенные в кавычки (" ' \''' """)
'''

# s = "это строка с 2-ными \" "
# s1 = 'это тоже строка с 1-ными " '
# s3 = """ это тоже
# строка с 3-ными \" """
# print(s)

'''
1. чтение
2. редактирование (изменение или добавление)
3. удаление
'''
# s = 'Это кот2' # ['Э', 'т', 'о', ..., '2']
# # примеры чтения данных из строки
# print(s, type(s))
# print(s[0], s[-1])
# print(s[4:])

# редактирование
# s1 = 'Это'
# s2 = 'кот2'
# s = s1 + ' ' + s2 # склеивание строк  == конкатенация
# s1_duble = s1 * 3 # дублирование строк
# print(s)
# print(s1_duble)


#
# s = 'Это кот'
# s[3] = '*' # TypeError: 'str' object does not support item assignment
# # 1
# s = s.replace(' ','*')
# # 2
# s = s[:3] + '*' + s[4:]
# # 3
# s = f'{s[:3]}*{s[4:]}' # f'' - f флаг (type)

# print(s)


#
# s = 'Это кот, скажи "Привет!"'
# s = s.replace(' ', '*')
# print(s)
# s = s.replace(' ', '*', 1)
# print(s)

# s = s.split(' ') # разделить
# print(s) # это список строк
# s1 = s[0] + ' ' + s[1]
# s2 = s[2] + ' ' + s[3]
# s = s1 + '*' + s2
# print(s)

# s = s.split(', ')
# print(s)
# s = s[0] + ',*' + s[1]
# print(s)

#
# s = '134'
# s = s[::-1]
# print(s)

#
'''
Дана строка формата 0100010110
небходимо поменять местами 0 и 1
'''
# s = '0100010110'
# print(s)
# s = s.replace('0', '*')
# s = s.replace('1', '0')
# s = s.replace('*', '1')
#
# print(s)


# #
'''
Дано число
узнать сколько цифр в числе
'''
# n = 456
# s = str(n)
# print(len(s))



# #—------------------------------- Задача —--------------------------------#
'''дано 4-х значное число, необходимо написать сколько единиц в числе
сколько сотен и сколько тысяч и десятков'''
# # 2345
# n = 2345
# s = str(n)
# print(f'Тысячи - {s[0]}, Сотни - {s[1]}, Десятки - {s[2]}, Единицы - {s[3]}')


#
# #—------------------------------- Задача —--------------------------------#
'''
1. посчитать кол-во "0" в строке, а также заменить первый "0" и последний "0"  в строке на '*'

ввод: 10234067
выход: 1*234*67

ввод: 1023406708
выход: 1*234067*8

ввод: 1023467
выход: 1*23467

ввод: 123467
выход: 123467
'''

# s = '123467'
# print(s.count('0'))
#
# d = '123467'
# if d.count('0') != 0:
#     d = d.replace('0', "*", 1)
#     d = d[::-1]
#     d = d.replace('0', "*", 1)
#     d = d[::-1]
#     print(d)
# else:
#     print('В числе нет нолей', d)


# #—------------------------------- Задача —--------------------------------#
'''Дана строка, состоящая из слов, разделенных пробелами.
Определите, сколько в ней слов.'''
# s = 'кот  1231 -  , :   лук ток '
# print(s.count(' ')+1)
# s = s.split(' ')
# print(s)
# print(f'Всего: {len(s)}',f'пустые: {s.count("")}', f'кол-во слов: {len(s)-s.count("")}')



#------------ Анализ ------------#
# категории символов
# буквы s.isalpha()
# цифры s.isdigit()
# пустоты spaces (пробелы, перенос строк(\n), табуляция(\t) и т.д.) s.isspace()
# спец. символы (все остальное)
# s = 'кот\n'
# print(len(s))

# s = '123fsa  , 4567'
# #print(s.isdigit())
# for el in s:
#     print(el, el.isdigit())


# # ACII и кодировки
# s = '1234</,.abcdef абвгд'
# for el in s:
#     print(el, el.isascii())

# #—------------------------------- Задача —--------------------------------#
'''Дано строковое представление времени таймера '03:25:57'.
Выведите на экран количество секунд,
оставшихся до момента срабатывания таймера.
Используйте формат сообщения «До срабатывания таймера осталось {total_seconds} сек.».'''
# s = '03:25:57'
# h = s[:2]
# total_seconds = 0 # всего секунд
# m = s[3:5]
# s = s[6:] # s - секунды
#
# if h.isdigit() and m.isdigit() and s.isdigit():
#     h = int(h)
#     m = int(m)
#     s = int(s)
#     total_seconds = h*60*60 + m*60 + s
#
#
# print(f'До срабатывания таймера осталось {total_seconds} сек.')

# #—------------------------------- Задача —--------------------------------#
# Дана произвольная строка .
# Подсчитайте в ней количество буквенных символов в любом регистре и
# выведите результат на экран.

# s = 'Кот 234.'
# count_total = 0 #буквенных символов в любом регистре
# count_upper = 0
# count_lower = 0
# for el in s:
#     if el.isalpha():
#         count_total += 1
#     if el.isupper():
#         count_upper += 1
#     elif el.islower():
#         count_lower += 1
#
#
# print(f'count_total: { count_total} | count_upper: {count_upper} | count_lower: {count_lower} ')




#—----------------------------- Самостоятельный повтор материала  —--------------------------------#
# list_dig = [4, 6, 9, 1, 3] # уникальный список чисел
# как получить элемент 9 и узнать какой у него индекс?
# При условии, что мы не знаем где в списке эта 9-ка.
# Есть 2 простых способа:

#   1. Перебор элементов в списке и когда встретим девятку, мы узнаем под каким индексом она скрывается.
# for el in list_dig: # условие границ перебора
    # if el == 9: # если встречаем 9
    #     print(f'элемент: {el}, его индекс: {list_dig.index(el)}') # выводим 9, выводим индекс 9-ки
    #     break # прерывание цикла

# аналогичный перебор можно сделать по индексам:
# for i in range(len(list_dig)): # !тут нужно помнить, что range работает по количеству элементов,
# # а значит по длине списка - len(список)
#     if list_dig[i] == 9:
#         print(f'элемент: {list_dig[i]}, его индекс: {i}')
#         break


# а можно было сразу вывести индекс 9-ки, без циклов for и if:
# print(list_dig.index(9))

#   2. Использовать enumerate:
# for i, el in enumerate(list_dig):
#     if el == 9:
#         print(f'элемент: {el}, его индекс: {i}')
#         break

# ---------------------------------------- #
# НО ЧТО ДЕЛАТЬ, ЕСЛИ ПЕРЕД НАМИ СЛОВАРЬ?
# d = {'Инна': 'грудь',
#      'Люда': 'рот',
#      'Лиля': 'зад',
#      'Марина': 'всё'} # словарь девичьих супер-способностей
# допустим мы хотим найти девушку, которая освоила все чудеса магии и может использовать всё
# for key in d: # для ключа содержащимся в словаре
#      if d[key] == 'всё': # если значение ключа (Имя), равно "всё":
#          print(key) # выводим ключ (Имя)

# Можно по другому, но муторно и непонятно:
# for value in d.values():
#      if value == 'всё':
#          print(list(d.keys())[list(d.values()).index(value)]) # выводим ключ (Имя)


# ----------------------------- Строки -------------------------------- #
'''
строки - это набор символов заключенных в кавычки
'''
# s = 'это строка'
# s1 = "это тоже строка"
# s2 = '''и это тоже строка'''
# s3 = """как и это строка"""

# '''
# Что мы можем делать со строками:
# 1. Чтение
# 2. Редактирование (изменения или добавления)
# 3. Удаление
# '''
# ------ ЧТЕНИЕ ------ #
# s = 'Это кот2' # строка - похожа на список ['Э', 'т', 'о', ..., '2']
# и работать с ней можно как со списком, но понимать, что это не одно и то же
# print(s, type(s)) # выводим переменную и её тип
# print(s[-1]) # выводим последний символ строки
# print(s[0]) # выводим первый символ строки
# print(s[:7], s[6::-1]) # можно использовать срезы. Можно отзеркалить Выведет: Это кот ток отЭ
# print(s[4:7], s[:4]) # можно разбить срезами (разделить) строку на две и поменять их местами в выводе
# # print(s.) # можно посмотреть какие методы предлагает python для работы со строками

# ----- РЕДАКТИРОВАНИЕ ----- #
# s1 = 'Это'
# s2 = 'кот2'
# s = s1 + s2 # конкатенация == склеивание строк. Этокот2
# s1_duble = s1 * 3 # ЭтоЭтоЭто
# print(s)
# print(s1_duble)


# s = 'Это кот'
# print(s[3]) # выведет пробел. Но его не видно, так что давай заменим его на *

# 1 ВАРИАНТ. Чтобы заменить пробел на *, нужно использовать метод replace
# s = s.replace(' ', '*') # s.replace(что_меняем, на_что_меняем) производим замену

# 2 ВАРИАНТ. Можно использовать срезы
# s = s[:3] + '*' + s[4:]

# 3 ВАРИАНТ. Чтоб упростить работу со срезами в строках, можно использовать ФЛАГИ (флажки)
# s = f'{s[:3]}*{s[4:]}' # f - флаг. Выведет то же самое, что и 2 вариант, только код более лаконичный

# print(s[3]) # выведет * вместо пробела. Чего мы и добивались
# print(s) # Это*кот

# ----- Теперь потренируемся ----- #
# s = 'Это кот, скажи "Привет!"'
# # s = s.replace(' ', '*') # Заменятся все пробелы на *. Это*кот,*скажи*"Привет!"
#
# # Но что если нужно заменить какое-то количество пробелов?
# # Добавляется параметр count (количество).
# # s = s.replace(' ', '*', 1) # Выведет: Это*кот, скажи "Привет!"
#
# # s = s.replace(' ', '*', 2) # Это*кот,*скажи "Привет!"
#
# print(s.split(' ')) # Выведет список: ['Это', 'кот,', 'скажи', '"Привет!"']
# # s.split() - если в скобках ничего не указывать, то по умолчанию,
# # он будет разбит на элементы, между которыми есть пробел
# # В конкретно этом случае, мы можем разбить строку на 2 части и сделать разделителем (', ')
# print(s.split(', ')) # Выведет список из 2-ух элементов: ['Это кот', 'скажи "Привет!"']
#
# # Чтобы зафиксировать сплит в переменной, необходимо направить в неё поток (заговорил как линуксоид, прикольно!)
# s = s.split(' ') # присвоит переменной s, значение - список ['Это', 'кот,', 'скажи', '"Привет!"']
# # теперь склеим элементы
# s1 = s[0] + ' ' + s[1] # Это кот
# print(s1, type(s1)) # Это кот, <class 'str'>
# s2 = s[2] + ' ' + s[3] # скажи "Привет!"
# s = s1 + '*' + s2 # Это кот,*скажи "Привет!"
#
# print(s)

# ------------------------------------ #
'''Задача: развернуть строку'''
# s = '134'
# print(s[::-1]) # 431

# ------------------------------------ #
'''
Дана строка формата 0100010110
необходимо поменять местами 0 и 1
'''
# s = '0100010110'
# print(s) # 0100010110
# s = s.replace('0', '*') # 0 меняем на *
# print(s) # *1***1*11*
# s = s.replace('1', '0') # 1 меняем на 0
# print(s) # *0***0*00*
# s = s.replace('*', '1') # * меняем на 1
# print(s) # 1011101001


# ------------------------------------ #
'''
Дано число. 
Необходимо узнать, сколько цифр в числе.
'''
# d = 5218
# len_d = len(str(d)) # преобразуем число в строку, считаем количество символов и присваиваем результат переменной
# print(len_d) # 4

# ------------------------------------ #
'''Дано 4-ех значное число, необходимо написать сколько единиц в числе, 
сколько десятков, сколько сотен, сколько тысяч'''
d = 2345
# # математическое решение - длинное
# thousands = d // 1000
# print(f'{thousands} тысячи')
# hundreds = d % 1000 // 100
# print(f'{hundreds} сотни')
# tens = d % 1000 % 100 // 10
# print(f'{tens} десятки')
# units = d % 10
# print(f'{units} единицы')

# Другое решение - короткое
# s = str(d)
# print(f'Тысячи: {s[0]}, Сотни: {s[1]}, Десятки: {s[2]}, Единицы: {s[3]}')

# ------------------------------------ #
'''
Дано число. Посчитать количество 0 и заменить первый 0 и последний 0 на *
ввод: 10234067
вывод: 1*234*67
'''
d = 102304067
s = str(d)
# o = 0 # счетчик нолей
# for i in s: # для элемента в строке s
#     if i == '0': # если элемент == '0'
#         o += 1 # увеличиваем счетчик на 1
o = s.count('0') # более изящный подсчет нолей, без циклов
print(f'Всего нолей: {o}') # выводим количество нолей
s = s.replace('0', '*', 1) # заменяем в строке первый 0 на *
s = s[::-1].replace('0', '*', 1) # переворачиваем строку и опять заменяем первый 0 на *
s = s[::-1] # снова переворачиваем строку в исходное состояние

print(s) # 1*2304*67




